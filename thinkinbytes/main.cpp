#include <algorithm>
#include <iostream>
#include <iterator>
#include <string>
#include <vector>

#include <cstdlib>
#include <iomanip>

namespace {

    void printCharacter(const char character) {
        if(std::isprint(character)) {
            std::cout << character;
        } else {
            std::cout << " ";
        }
    }

    // https://stackoverflow.com/a/776550/3770260
    template <typename INT>
#if __cplusplus > 201100L // Apply constexpr to C++ 11 to ease optimization
    constexpr
#endif // See also https://stackoverflow.com/a/7269693/3770260
    INT rol(INT val, size_t len) {
#if __cplusplus > 201100L && _wp_force_unsigned_rotate // Apply unsigned check C++ 11 to make sense
        static_assert(std::is_unsigned<INT>::value,
                  "Rotate Left only makes sense for unsigned types");
#endif
        return (val << len) | ((unsigned) val >> (-len & (sizeof(INT) * CHAR_BIT - 1)));
    }

}

int main() {

    try {

        // clang-format off
        std::vector<std::vector<std::string>> mystery{
                {"0x2A", "0x2A", "0x2A", "0x2A", "0x2A", "0x2A", "0x2A", "0x2A", "0x2A", "0x2A", "0x2A", "0x2A", "0x2A", "0x2A", "0x2A", "0x2A", "0x2A", "0x2A", "0x2A", "0x2A", "0x2A", "0x2A", "0x2A", "0x2A", "0x2A", "0x2A", "0x2A", "0x2A", "0x2A", "0x2A", "0x2A", "0x2A", "0x2A", "0x2A"},
                {"0x2A", "0x20", "0x59", "0x6F", "0x75", "0x20", "0x61", "0x72", "0x65", "0x20", "0x6F", "0x6E", "0x20", "0x74", "0x68", "0x65", "0x20", "0x72", "0x69", "0x67", "0x68", "0x74", "0x20", "0x77", "0x61", "0x79", "0x21", "0x20", "0x20", "0x20", "0x20", "0x20", "0x20", "0x2A"},
                {"0x2A", "0x20", "0x4E", "0x6F", "0x77", "0x20", "0x64", "0x6F", "0x20", "0x74", "0x68", "0x65", "0x20", "0x66", "0x6F", "0x6C", "0x6C", "0x6F", "0x77", "0x69", "0x6E", "0x67", "0x3A", "0x20", "0x20", "0x20", "0x20", "0x20", "0x20", "0x20", "0x20", "0x20", "0x20", "0x2A"},
                {"0x2A", "0x20", "0x22", "0x6F", "0x6E", "0x65", "0x20", "0x69", "0x73", "0x20", "0x7A", "0x65", "0x72", "0x6F", "0x20", "0x61", "0x6E", "0x64", "0x20", "0x7A", "0x65", "0x72", "0x6F", "0x20", "0x69", "0x73", "0x20", "0x6F", "0x6E", "0x65", "0x22", "0x20", "0x20", "0x2A"},
                {"0x2A", "0x2A", "0x2A", "0x2A", "0x2A", "0x2A", "0x2A", "0x2A", "0x2A", "0x2A", "0x2A", "0x2A", "0x2A", "0x2A", "0x2A", "0x2A", "0x2A", "0x2A", "0x2A", "0x2A", "0x2A", "0x2A", "0x2A", "0x2A", "0x2A", "0x2A", "0x2A", "0x2A", "0x2A", "0x2A", "0x2A", "0x2A", "0x2A", "0x2A"},
                {"0xDC", "0xDC", "0xDC", "0xDC", "0xDC", "0xDC", "0xDC", "0xDC", "0xDC", "0xDC", "0xDC", "0xDC", "0xDC", "0xDC", "0xDC", "0xDC", "0xDC", "0xDC", "0xDC", "0xDC", "0xDC", "0xDC", "0xDC", "0xDC", "0xDC", "0xDC", "0xDC", "0xDC", "0xDC", "0xDC", "0xDC", "0xDC", "0xDC", "0xDC"},
                {"0xDC", "0xDF", "0xB1", "0x9A", "0x87", "0x8B", "0xDF", "0x8C", "0x8B", "0x9A", "0x8F", "0xC5", "0xDF", "0xDF", "0xDF", "0xDF", "0xDF", "0xDF", "0xC3", "0xC3", "0xDF", "0xCC", "0xDF", "0xDF", "0xDF", "0xDF", "0xDF", "0xDF", "0xDF", "0xDF", "0xDF", "0xDF", "0xDF", "0xDC"},
                {"0xDC", "0xDF", "0xDF", "0x88", "0x97", "0x96", "0x9C", "0x97", "0xDF", "0x92", "0x9A", "0x9E", "0x91", "0x8C", "0xDF", "0x9C", "0x86", "0x9C", "0x93", "0x96", "0x9C", "0xDF", "0x93", "0x9A", "0x99", "0x8B", "0xDF", "0x8C", "0x97", "0x96", "0x99", "0x8B", "0xDF", "0xDC"},
                {"0xDC", "0xDF", "0xDF", "0x9A", "0xD1", "0x98", "0xD1", "0xDF", "0xDF", "0xCF", "0xCE", "0xCF", "0xCE", "0xCE", "0xCF", "0xCF", "0xCE", "0xDF", "0xD2", "0xC1", "0xDF", "0xCE", "0xCE", "0xCF", "0xCF", "0xCE", "0xCF", "0xCE", "0xCF", "0xDF", "0xDF", "0xDF", "0xDF", "0xDC"},
                {"0xDC", "0xDC", "0xDC", "0xDC", "0xDC", "0xDC", "0xDC", "0xDC", "0xDC", "0xDC", "0xDC", "0xDC", "0xDC", "0xDC", "0xDC", "0xDC", "0xDC", "0xDC", "0xDC", "0xDC", "0xDC", "0xDC", "0xDC", "0xDC", "0xDC", "0xDC", "0xDC", "0xDC", "0xDC", "0xDC", "0xDC", "0xDC", "0xDC", "0xDC"},
                {"0xF4", "0xF4", "0xF4", "0xF4", "0xF4", "0xF4", "0xF4", "0xF4", "0xF4", "0xF4", "0xF4", "0xF4", "0xF4", "0xF4", "0xF4", "0xF4", "0xF4", "0xF4", "0xF4", "0xF4", "0xF4", "0xF4", "0xF4", "0xF4", "0xF4", "0xF4", "0xF4", "0xF4", "0xF4", "0xF4", "0xF4", "0xF4", "0xF4", "0xF4"},
                {"0xF4", "0xFB", "0xD7", "0x32", "0x73", "0xFB", "0x32", "0x12", "0x11", "0xB8", "0xFB", "0xFB", "0xFB", "0xFB", "0xFB", "0xFB", "0xFB", "0xFB", "0xFB", "0xFB", "0xFB", "0xFB", "0xFB", "0xFB", "0xFB", "0xFB", "0xFB", "0xFB", "0xFB", "0xFB", "0xFB", "0xFB", "0xFB", "0xF4"},
                {"0xF4", "0xFB", "0xFB", "0xFB", "0xFB", "0xF4", "0x16", "0xB5", "0xFB", "0x11", "0xD2", "0x71", "0xF2", "0xFB", "0xD9", "0x79", "0xD9", "0xFB", "0xFA", "0x73", "0x53", "0x93", "0xD2", "0x52", "0xD3", "0x72", "0xDA", "0xFB", "0xFB", "0xFB", "0xFB", "0xFB", "0xFB", "0xF4"},
                {"0xF4", "0xFB", "0x75", "0xF2", "0x53", "0xFB", "0x91", "0x12", "0x72", "0x51", "0x71", "0xD2", "0x12", "0x32", "0xFB", "0xD2", "0x91", "0xFB", "0x32", "0x53", "0xD3", "0xB1", "0xDB", "0xFB", "0xFB", "0xFB", "0xFB", "0xFB", "0xFB", "0xFB", "0xFB", "0xFB", "0xFB", "0xF4"},
                {"0xF4", "0xF4", "0xF4", "0xF4", "0xF4", "0xF4", "0xF4", "0xF4", "0xF4", "0xF4", "0xF4", "0xF4", "0xF4", "0xF4", "0xF4", "0xF4", "0xF4", "0xF4", "0xF4", "0xF4", "0xF4", "0xF4", "0xF4", "0xF4", "0xF4", "0xF4", "0xF4", "0xF4", "0xF4", "0xF4", "0xF4", "0xF4", "0xF4", "0xF4"},
                {"0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B"},
                {"0x2B", "0x4A", "0x26", "0xA3", "0x83", "0xA2", "0x00", "0x62", "0xC0", "0xE0", "0xC3", "0x62", "0xC0", "0x63", "0xA3", "0x83", "0x20", "0x6A", "0x4A", "0x4A", "0x4A", "0x09", "0xEB", "0x6B", "0x4A", "0x4A", "0x4A", "0x4A", "0x4A", "0x4A", "0x4A", "0x4A", "0x4A", "0x2B"},
                {"0x2B", "0x4A", "0xC4", "0x43", "0xE2", "0x20", "0xE2", "0x4A", "0x62", "0x00", "0xE2", "0x4A", "0xC0", "0x43", "0xE2", "0x4A", "0x82", "0x63", "0x83", "0x62", "0xC3", "0x4A", "0x22", "0xA3", "0xA3", "0x00", "0xC2", "0x20", "0x09", "0x4A", "0x4A", "0x4A", "0x4A", "0x2B"},
                {"0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B"},
                {"0x2B", "0x4A", "0x87", "0xA3", "0x00", "0xC0", "0x43", "0x4A", "0x82", "0x63", "0x80", "0xE2", "0x4A", "0x28", "0x4A", "0xC2", "0xE2", "0xA2", "0x00", "0xE2", "0xE2", "0x20", "0x4A", "0x4A", "0x4A", "0x4A", "0x4A", "0x4A", "0x4A", "0x4A", "0x4A", "0x4A", "0x4A", "0x2B"},
                {"0x2B", "0x4A", "0x28", "0x4A", "0xC0", "0xA0", "0xA3", "0x4A", "0x40", "0xA3", "0x63", "0x83", "0xC0", "0x4A", "0x69", "0x4A", "0x82", "0x63", "0x80", "0xE2", "0x4A", "0xE8", "0x4A", "0xE3", "0x63", "0x83", "0xE0", "0xC0", "0xE2", "0x20", "0x4A", "0x4A", "0x4A", "0x2B"},
                {"0x2B", "0x4A", "0xE6", "0x62", "0x20", "0xC0", "0x4A", "0x68", "0x4A", "0x01", "0xE2", "0x00", "0xA3", "0x4A", "0xC2", "0xE2", "0xA2", "0x00", "0xE2", "0xE2", "0x20", "0x4A", "0x4A", "0x4A", "0x4A", "0x4A", "0x4A", "0x4A", "0x4A", "0x4A", "0x4A", "0x4A", "0x4A", "0x2B"},
                {"0x2B", "0x4A", "0x82", "0xA3", "0xE0", "0x00", "0x4A", "0x40", "0xA3", "0x63", "0x83", "0xC0", "0x4A", "0xA3", "0x83", "0xE2", "0x4A", "0x08", "0x4A", "0xC0", "0x43", "0x00", "0xE2", "0xE2", "0x4A", "0xE3", "0x63", "0x83", "0xE0", "0xC0", "0xE2", "0x20", "0x4A", "0x2B"},
                {"0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B"},
                {"0x2B", "0x4A", "0x04", "0xE2", "0x82", "0xE2", "0x00", "0x4A", "0xC0", "0xA3", "0x4A", "0xC0", "0x43", "0xE2", "0x4A", "0x22", "0x62", "0x22", "0x43", "0xE2", "0x4A", "0xC2", "0xE2", "0x20", "0x22", "0x00", "0x63", "0x40", "0xC0", "0x63", "0xA3", "0x83", "0x4A", "0x2B"},
                {"0x2B", "0x4A", "0xA3", "0x83", "0x4A", "0x43", "0xA3", "0xA0", "0x4A", "0xC0", "0xA3", "0x4A", "0xE0", "0x20", "0xE2", "0x4A", "0xC0", "0x43", "0xE2", "0x4A", "0x22", "0xA3", "0xA3", "0x00", "0xC2", "0x63", "0x83", "0x62", "0xC0", "0xE2", "0x20", "0x8B", "0x4A", "0x2B"},
                {"0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B", "0x2B"},
        };
        // clang-format on

        // the simple part Hex to Ascii
        {
            std::uint64_t i{0ul};
            for (auto &line  : mystery) {

                std::cout << std::setw(2) << i << " ";

                for (auto &&character : line) {
                    printCharacter(static_cast<char>(std::stoi(character, 0, 16)));
                }

                std::cout << "\n";
                ++i;
            }
        }

        std::cout << "\n" << "\n";

        // Hex to Binary and flip it
        {
            std::uint64_t i{0ull};

            for (auto &line : mystery) {

                std::cout << std::setw(2) << i << " ";

                for (auto &binary : line) {
                    std::bitset<8> myBitset(static_cast<unsigned long long int>(std::stol(binary, 0, 16)));
                    myBitset.flip();
                    printCharacter(static_cast<char>(myBitset.to_ulong()));
                }

                std::cout << "\n";
                ++i;
            }
        }

        std::cout << "\n" << "\n";


        // Hex to Binary und cyclic left shift
        {

            std::uint64_t i {0ull};

            for(auto& line : mystery) {

                std::cout << std::setw(2) << i << " ";

                for(auto& binary : line) {
                    std::bitset<8> myBitset(static_cast<unsigned long long int>(std::stol(binary, 0, 16)));
                    myBitset.flip();
                    std::uint8_t value = rol(static_cast<std::uint8_t >(myBitset.to_ulong()), 3ul);

                    printCharacter(static_cast<char>(value));
                }

                std::cout << "\n";
                ++i;
            }

        }

        std::cout << "\n" << "\n";

        // XOR with 141 (decimal)
        {

            std::uint64_t i {0ull};

            for(auto& line : mystery) {

                std::cout << std::setw(2) << i << " ";

                for(auto& binary : line) {
                    std::bitset<8> myBitset(static_cast<unsigned long long int>(std::stol(binary, 0, 16)));
                    myBitset.flip();
                    std::uint8_t value = rol(static_cast<std::uint8_t >(myBitset.to_ulong()), 3ul);

                    value = static_cast<uint8_t>(value xor 0x8d);

                    printCharacter(static_cast<char>(value));
                }

                std::cout << "\n";
                ++i;
            }

        }

    } catch (std::exception &e) {
        std::cerr << "error " << e.what() << "\n";
    }


    return 0;
}
